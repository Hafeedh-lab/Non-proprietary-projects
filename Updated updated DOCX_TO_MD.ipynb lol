{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1h39FscdPXE8ouM2FzdkgHcz6AM2IQRxf",
      "authorship_tag": "ABX9TyNuv33mxJv0rgu+qupXMXmf",
      "include_colab_link": true
    },
    "kernelspec": {"name": "python3", "display_name": "Python 3"},
    "language_info": {"name": "python"}
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {"id": "view-in-github", "colab_type": "text"},
      "source": [
        "<a href=\"https://colab.research.google.com/github/Hafeedh-lab/Non-proprietary-projects/blob/main/Updated%20updated%20DOCX_TO_MD.ipynb%20lol\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {"id": "HsTu7TClib4"},
      "outputs": [],
      "source": [
        "[# Notebook Banner: Title and overview of DOCX to Markdown conversion]\n",
        "# ============================================================\n",
        "#  OOGA-BOOGA DOCX‚ÜíMARKDOWN BLAST-OFF for Colab ü¶Ñüí•\n",
        "#  ‚Ä¢ BOOM! Turn every .docx into .md like a mad scientist ü§ìüß™\n",
        "#  ‚Ä¢ Error-splatters, mega-thread juggling & ninja file-checks üöÄüëæ\n",
        "#  ‚Ä¢ Pandoc under the hood doing the heavy lifting üõ†Ô∏èüòé\n",
        "#  ‚Ä¢ Field-tested Aug 2025 on Colab‚Äôs Python 3.10 rave party üéâüêç\n",
        "# ============================================================\n",
        "[# Install the pypandoc package]\n",
        "#Install pypandoc you dummy\n",
        "!pip install pypandoc\n",
        "import os\n",
        "import glob\n",
        "import pypandoc\n",
        "from pathlib import Path\n",
        "from concurrent.futures import ThreadPoolExecutor, as_completed\n",
        "from tqdm.auto import tqdm\n",
        "import logging\n",
        "from typing import List, Tuple, Optional\n",
        "import hashlib\n",
        "from datetime import datetime\n",
        "\n",
        "[# Install dependencies: pypandoc, python-docx, tqdm]\n",
        "# üö® DEPENDENCY SUMMONING RITUAL: pypandoc, python-docx & tqdm, engage! ‚ú®\n",
        "print(\"Installing dependencies...\")\n",
        "!pip install -q \"pypandoc>=1.12\" python-docx tqdm\n",
        "\n",
        "[# Install the system Pandoc package]\n",
        "# üåÆ PANDOC DELIVERY TRUCK: apt-get update + pandoc fiesta incoming! üéä\n",
        "print(\"Installing pandoc...\")\n",
        "!apt-get update && apt-get install -y pandoc\n",
        "\n",
        "[# Mount Google Drive for file access]\n",
        "# ‚îÄ‚îÄ 2. DRIVE MOUNT MAYHEM ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n",
        "from google.colab import drive\n",
        "print(\"Mounting Google Drive like a pro wrestler slams a table...\")\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "[# Set up logging to file and console]\n",
        "# ‚îÄ‚îÄ 3. LOGGING CHAOS FACTORY ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n",
        "logging.basicConfig(\n",
        "    level=logging.INFO,\n",
        "    format='%(asctime)s - %(levelname)s - %(message)s',\n",
        "    handlers=[\n",
        "        logging.FileHandler('/content/conversion_log.txt'),\n",
        "        logging.StreamHandler()\n",
        "    ]\n",
        ")\n",
        "logger = logging.getLogger(name)\n",
        "\n",
        "[# Define Config class for paths and settings]\n",
        "# ‚îÄ‚îÄ 4. CONFIG CIRCUS RINGMASTER ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n",
        "class Config:\n",
        "    [# Input folder containing .docx files]\n",
        "    # üè† Edit these because your Drive is YOUR kingdom\n",
        "    INPUT_FOLDER  = '/content/drive/MyDrive/DOCX TO MD TEST'  # ‚Üê where your .docx beasts roam\n",
        "    [# Output folder for .md files]\n",
        "    OUTPUT_FOLDER = '/content/drive/MyDrive/DOCX TO MD TEST'  # ‚Üê where the .md loot will hide\n",
        "\n",
        "    [# Number of parallel workers]\n",
        "    # ‚ö°Ô∏è PERFORMANCE JUICE SETTINGS\n",
        "    MAX_WORKERS   = 4    # how many worker bees you unleashing üêùüêùüêùüêù\n",
        "    [# Skip conversion if output exists]\n",
        "    SKIP_EXISTING = True # skip the snooze-fest if .md is already chillin'\n",
        "    [# Validate .docx files before conversion]\n",
        "    VALIDATE_DOCX = True # sniff out fake .docx like a truffle hog üêñ\n",
        "\n",
        "    [# Pandoc format and arguments]\n",
        "    # ü™Ñ PANDOC SPELLBOOK\n",
        "    PANDOC_FORMAT = 'gfm'                        # GitHub-flavoured markdown = yum\n",
        "    PANDOC_ARGS   = ['--wrap=none', '--extract-media=./media']  # no wraps + media loot\n",
        "\n",
        "[# Validate a .docx file by attempting to load it]\n",
        "def validate_docx_file(file_path: str) -> bool:\n",
        "    \"\"\"üëÄ ‚ÄúIs this .docx real or a ghost?‚Äù Returns True if legit.\"\"\"\n",
        "    try:\n",
        "        from docx import Document\n",
        "        Document(file_path)\n",
        "        return True\n",
        "    except Exception as e:\n",
        "        logger.warning(f\"OOPSIE invalid .docx at {file_path}: {e}\")\n",
        "        return False\n",
        "\n",
        "[# Compute MD5 hash of a file]\n",
        "def get_file_hash(file_path: str) -> str:\n",
        "    \"\"\"üîê MD5 SMASHER: Create a fingerprint so we know if file changed.\"\"\"\n",
        "    hash_md5 = hashlib.md5()\n",
        "    try:\n",
        "        with open(file_path, \"rb\") as f:\n",
        "            for chunk in iter(lambda: f.read(4096), b\"\"):\n",
        "                hash_md5.update(chunk)\n",
        "        return hash_md5.hexdigest()\n",
        "    except Exception:\n",
        "        return \"\"\n",
        "\n",
        "[# Decide if a file should be (re)converted]\n",
        "def should_convert_file(docx_path: str, md_path: str, skip_existing: bool) -> bool:\n",
        "    \"\"\"üßê ‚ÄúConvert or nah?‚Äù Checks if .md is old or missing.\"\"\"\n",
        "    if not skip_existing:\n",
        "        return True\n",
        "    if not os.path.exists(md_path):\n",
        "        return True\n",
        "\n",
        "    [# Compare modification times]\n",
        "    # ‚è≤Ô∏è Time-travel test: only redo if source is FRESHER than target\n",
        "    docx_mtime = os.path.getmtime(docx_path)\n",
        "    md_mtime   = os.path.getmtime(md_path)\n",
        "    return docx_mtime > md_mtime\n",
        "\n",
        "[# Convert a single .docx file to markdown]\n",
        "def convert_single_file(args: Tuple[str, str, dict]) -> Tuple[bool, str, Optional[str]]:\n",
        "    \"\"\"\n",
        "    üîÑ Converts one .docx ‚Üí .md\n",
        "    Returns (didItWork, filePath, errorMsg)\n",
        "    \"\"\"\n",
        "    docx_path, output_folder, config = args\n",
        "\n",
        "    try:\n",
        "        [# Optionally validate the .docx]\n",
        "        # üïµÔ∏è‚Äç‚ôÄÔ∏è Optional docx detective: legit file?\n",
        "        if config.get('validate_docx', True) and not validate_docx_file(docx_path):\n",
        "            return False, docx_path, \"INVALID .docx, BRO!\"\n",
        "\n",
        "        [# Construct output file path]\n",
        "        # üó∫Ô∏è Build the output path, keep those folders intact!\n",
        "        rel_path = os.path.relpath(docx_path, config['input_folder'])\n",
        "        basename = os.path.splitext(os.path.basename(rel_path))[0] + '.md'\n",
        "\n",
        "        [# Create subdirectory if needed]\n",
        "        # üèóÔ∏è Make subfolders like a boss\n",
        "        subdir = os.path.dirname(rel_path)... (truncated for brevity)"
      ]
    }
  ]
}
